# ------------------------------------------------------------------------------
#        -= Arno's Iptables Firewall(AIF) - Traffic Accounting plugin =-
#
PLUGIN_NAME="Traffic Accounting plugin"
PLUGIN_VERSION="1.31"
PLUGIN_CONF_FILE="traffic-accounting.conf"
#
# Last changed          : May 9, 2019
# Requirements          : AIF 2.1.0 (or newer)
# Comments              : This implements support for traffic accounting for
#                         IPv4 & IPv6. It has support for dynamic host resolving
#
# Author                : (C) Copyright 2008-2019 by Arno van Amersfoort
# Web                   : https://github.com/arno-iptables-firewall/aif
# Email                 : a r n o DOT v a n DOT a m e r s f o o r t AT g m a i l DOT c o m
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# (Background) job name
JOB_NAME="traffic-accounting"

# (Background) job helper script
JOB_HELPER_SCRIPT="$PLUGIN_BIN_PATH/traffic-accounting-helper"

traffic_accounting_init()
{
  # Flush accounting chains
  iptables -F ACCOUNTING_INPUT_CHAIN
  iptables -F ACCOUNTING_OUTPUT_CHAIN

  # (Re)insert rule in the INPUT chain
  iptables -I INPUT 1 -j ACCOUNTING_INPUT_CHAIN

  # (Re)insert rule in the OUTPUT chain
  # Insert rule in the OUTPUT chain
  iptables -I OUTPUT 1 -j ACCOUNTING_OUTPUT_CHAIN

  # Remove old cron job (this is in case a legacy plugin left it)
  rm -f /etc/cron.d/traffic-accounting

  # Create background job
  if ! job_add "$JOB_NAME" "${TRAFFIC_ACCOUNTING_TIME:-60}" "$JOB_HELPER_SCRIPT"; then
    return 1
  fi

  return 0
}


# Plugin start function
plugin_start()
{
  # Enable Conntrack Accounting (kernel config CONFIG_NF_CT_ACCT)
  # CONFIG_NF_CT_ACCT is deprecated and will be removed sometime after kernel 2.6.27
  sysctl net.netfilter.nf_conntrack_acct=1 2>/dev/null

  # Create new chains
  iptables -N ACCOUNTING_INPUT_CHAIN 2>/dev/null
  iptables -N ACCOUNTING_OUTPUT_CHAIN 2>/dev/null

  # Initialize
  if ! traffic_accounting_init; then
    return 1
  fi

  return 0
}


# Plugin restart function
plugin_restart()
{
  echo "${INDENT}Restarting..."

  # Store current values (NOTE: Ignore return value)
  job_run_once "$JOB_HELPER_SCRIPT"

  # Initialize
  if ! traffic_accounting_init; then
    return 1
  fi

  return 0
}


# Plugin stop function
plugin_stop()
{
  # Remove old cron job (this is in case a legacy plugin left it)
  rm -f /etc/cron.d/traffic-accounting

  # Store current values (NOTE: Ignore return value)
  job_run_once "$JOB_HELPER_SCRIPT"

  iptables -D INPUT -j ACCOUNTING_INPUT_CHAIN 2>/dev/null
  iptables -D OUTPUT -j ACCOUNTING_OUTPUT_CHAIN 2>/dev/null

  iptables -F ACCOUNTING_INPUT_CHAIN
  iptables -X ACCOUNTING_INPUT_CHAIN 2>/dev/null
  iptables -F ACCOUNTING_OUTPUT_CHAIN
  iptables -X ACCOUNTING_OUTPUT_CHAIN 2>/dev/null

  return 0
}


# Plugin status function
plugin_status()
{
  # Store current values (NOTE: Ignore return value)
  job_run_once "$JOB_HELPER_SCRIPT"

  # Call parse script
  "$PLUGIN_BIN_PATH/traffic-accounting-show"

  return 0
}


# Check sanity of eg. environment
plugin_sanity_check()
{
  if [ ! -f "$JOB_HELPER_SCRIPT" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The job helper script($JOB_HELPER_SCRIPT) can not be found!\033[0m\n" >&2
    return 1
  fi

  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -f "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" -a "$PLUGIN_CMD" != "stop-restart" ] ||
     [ "$ENABLED" = "0" -a "$PLUGIN_CMD" = "stop-restart" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|''         ) plugin_start; PLUGIN_RET_VAL=$? ;;
        restart          ) plugin_restart; PLUGIN_RET_VAL=$? ;;
        stop|stop-restart) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status           ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *                ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
  fi
fi
