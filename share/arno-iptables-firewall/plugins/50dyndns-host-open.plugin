# ------------------------------------------------------------------------------
#         -= Arno's Iptables Firewall(AIF) - DynDNS Host Open plugin =-
#
PLUGIN_NAME="DynDNS Host Open plugin"
PLUGIN_VERSION="1.42a"
PLUGIN_CONF_FILE="dyndns-host-open.conf"
#
# Last changed          : May 9, 2019
# Requirements          : AIF 2.1.0 (or newer)
# Comments              : This implements dynamic DNS (DynDNS) support for eg. opening ports
#
# Author                : (C) Copyright 2008-2019 by Arno van Amersfoort
# Web                   : https://github.com/arno-iptables-firewall/aif
# Email                 : a r n o DOT v a n DOT a m e r s f o o r t AT g m a i l DOT c o m
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# (Background) job name
JOB_NAME="dyndns-host-open"

# (Background) job helper script
JOB_HELPER_SCRIPT="$PLUGIN_BIN_PATH/dyndns-host-open-helper"

dyndns_host_open_init()
{
  # Insert rule into the main chain:
  iptables -A EXT_INPUT_CHAIN -j DYNDNS_CHAIN

  # Remove old cron job (this is in case a legacy plugin left it)
  rm -f /etc/cron.d/dyndns-host-open

  # Create background job
  if ! job_add "$JOB_NAME" "${DYNDNS_HOST_OPEN_TIME:-60}" "$JOB_HELPER_SCRIPT"; then
    return 1
  fi

  return 0
}


# Plugin start function
plugin_start()
{
  # Create new DYNDNS_CHAIN chain:
  iptables -N DYNDNS_CHAIN 2>/dev/null
  iptables -F DYNDNS_CHAIN

  # Initialize
  if ! dyndns_host_open_init; then
    return 1
  fi

  return 0
}


# Plugin restart function
plugin_restart()
{
  # Re-add standard chain rules that are flushed on a restart
  echo "${INDENT}Restarting..."

  # Initialize
  if ! dyndns_host_open_init; then
    return 1
  fi

  return 0
}


# Plugin stop function
plugin_stop()
{
  # Remove old cron job (this is in case a legacy plugin left it)
  rm -f /etc/cron.d/dyndns-host-open

  iptables -D EXT_INPUT_CHAIN -j DYNDNS_CHAIN 2>/dev/null

  iptables -F DYNDNS_CHAIN
  iptables -X DYNDNS_CHAIN 2>/dev/null

  return 0
}


# Plugin status function
plugin_status()
{
  iptables -L DYNDNS_CHAIN |sed -e "s/^/$INDENT/"

  return 0
}


# Check sanity of eg. environment
plugin_sanity_check()
{
  if [ -z "$DYNDNS_HOST_OPEN_TCP" -a -z "$DYNDNS_HOST_OPEN_UDP"  -a \
       -z "$DYNDNS_HOST_OPEN_IP"  -a -z "$DYNDNS_HOST_OPEN_ICMP" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The plugin config file is not (properly) setup!\033[0m\n" >&2
    return 1
  fi

  if [ ! -f "$JOB_HELPER_SCRIPT" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The job helper script($JOB_HELPER_SCRIPT) can not be found!\033[0m\n" >&2
    return 1
  fi

  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -f "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" -a "$PLUGIN_CMD" != "stop-restart" ] ||
     [ "$ENABLED" = "0" -a "$PLUGIN_CMD" = "stop-restart" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$? ;;
        restart ) plugin_restart; PLUGIN_RET_VAL=$? ;;
        stop|stop-restart) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status  ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
  fi
fi
