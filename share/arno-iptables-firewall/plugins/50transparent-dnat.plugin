# ------------------------------------------------------------------------------
#         -= Arno's Iptables Firewall(AIF) - Transparent DNAT plugin =-
#
PLUGIN_NAME="Transparent DNAT plugin"
PLUGIN_VERSION="0.31BETA (EXPERIMENTAL!)"
PLUGIN_CONF_FILE="transparent-dnat.conf"
#
# Last changed          : July 31, 2015
# Requirements          : kernel 2.6 + ip_nat + iptable_nat
# Comments              : This plugin enables transparent DNAT for internal hosts for
#                         certain ports. Meaning you can redirect certain TCP/UDP ports (eg. http)
#                         which should be redirected from a certain INET address to an
#                         internal address.
#
# Author                : (C) Copyright 2007-2009 by Arno van Amersfoort
# Credits               : Rok Potocnik for his initial idea
# Web                   : https://github.com/arno-iptables-firewall/aif
# Email                 : a r n o DOT v a n DOT a m e r s f o o r t AT g m a i l DOT c o m
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------------------

# Plugin start function
plugin_start()
{
  # Some required modules are already loaded by the main script:
  modprobe_multi nf_nat ip_nat
  modprobe iptable_nat

  echo "${INDENT}Using internal IP $DNAT_MY_INTERNAL_IP & external IP $DNAT_MY_EXTERNAL_IP"
  if [ -n "$DNAT_TCP_PORTS" ]; then
    echo "${INDENT}Enabling transparent DNAT for TCP port(s): $DNAT_TCP_PORTS"
    IFS=' ,'
    for interface in $INT_IF; do
      for port in $DNAT_TCP_PORTS; do
        ip4tables -t nat -A POSTROUTING -o $interface -p tcp --dport $port -d $DNAT_MY_INTERNAL_IP -j MASQUERADE
        
        ip4tables -t nat -A PREROUTING -i $interface -d $DNAT_MY_EXTERNAL_IP -p tcp --dport $port -j DNAT --to-destination $DNAT_MY_INTERNAL_IP
      done
    done
  else
    echo "${INDENT}No TCP ports configured"
  fi

  if [ -n "$DNAT_UDP_PORTS" ]; then
    echo "${INDENT}Enabling transparent DNAT for UDP port(s): $DNAT_UDP_PORTS"
    IFS=' ,'
    for interface in $INT_IF; do
      for port in $DNAT_UDP_PORTS; do
        ip4tables -t nat -A POSTROUTING -o $interface -p udp --dport $port -d $DNAT_MY_INTERNAL_IP -j MASQUERADE

        ip4tables -t nat -A PREROUTING -i $interface -d $DNAT_MY_EXTERNAL_IP -p udp --dport $port -j DNAT --to-destination $DNAT_MY_INTERNAL_IP
      done
    done
  else
    echo "${INDENT}No UDP ports configured"
  fi

  return 0
}


# Plugin stop function
plugin_stop()
{
  return 0
}


# Plugin status function
plugin_status()
{
  return 0
}


# Check sanity of eg. environment
plugin_sanity_check()
{
  if [ -z "$DNAT_MY_INTERNAL_IP" -o -z "$DNAT_MY_EXTERNAL_IP" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The plugin config file is not properly set!\033[0m\n" >&2
    return 1
  fi

  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -f "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$? ;;
        stop    ) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status  ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
  fi
fi
