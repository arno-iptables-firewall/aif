# ------------------------------------------------------------------------------
#    -= Arno's Iptables Firewall(AIF) - SSH Brute Force Protection plugin =-
#
PLUGIN_NAME="SSH Brute-Force Protection plugin"
PLUGIN_VERSION="1.1b"
PLUGIN_CONF_FILE="ssh-brute-force-protection.conf"
#
# Last changed          : June 14, 2017
# Requirements          : kernel 2.6 + ipt_recent or xt_recent
#                       : AIF 1.9.2k (and later)
# Comments              : This plugin implements protecting for brute force
#                         cracking by limiting the amount of connection attempts
#                         for each source IP in specific time slot. Its
#                         primarely intended for SSH/port 22 but in principle
#                         it can be used for any TCP protocol
#                         (eg. FTP/SMTP/IMAP etc.
#                         Updated for mixed IPv4/IPv6
#
# Author                : (C) Copyright 2006-2017 by Arno van Amersfoort
# Web                   : https://github.com/arno-iptables-firewall/aif
# Email                 : a r n o DOT v a n DOT a m e r s f o o r t AT g m a i l DOT c o m
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# Plugin start function
plugin_start()
{
  if [ "$IPV6_DETECTED" = "1" ] && [ "$SSH_BFP_IPV6_ENABLE" = "0" ]; then
    echo "${INDENT}NOTE: Only IPv4 is protected."
  fi

  # Probe module xt_recent for IPv4/IPv6 or ipt_recent for IPv4:
  # (Allows checking for recent packets)
  modprobe_multi xt_recent ipt_recent

  # Create new SSH_CHK to insert SSH checker + whitelist:
  $IPTABLES -N SSH_CHK 2>/dev/null
  $IPTABLES -F SSH_CHK

  # Create new SSH_LOG_DROP chain for loggin' 'n droppin':
  $IPTABLES -N SSH_LOG_DROP 2>/dev/null
  $IPTABLES -F SSH_LOG_DROP

  $IPTABLES -A SSH_LOG_DROP -m limit --limit 1/m --limit-burst 1 -j LOG \
    --log-level $LOGLEVEL --log-prefix "AIF:SSH Brute force attack?: "
  $IPTABLES -A SSH_LOG_DROP -j DROP

  if [ -n "$SSH_BFP_TRUSTED_HOSTS" ]; then
    # Create whitelist:
    echo "${INDENT}Allowing bypass of SSH protection checks for: $SSH_BFP_TRUSTED_HOSTS"
    IFS=' ,'
    for host in `ip_range "$SSH_BFP_TRUSTED_HOSTS"`; do
      $IPTABLES -A SSH_CHK -s $host -j RETURN
    done
  fi

  # Create rate1 & rate2 checker:
  $IPTABLES -A SSH_CHK -m recent --name sshchk --set
  $IPTABLES -A SSH_CHK -m recent --name sshchk --update \
    --seconds $SSH_BFP_MAX_TIME1 --hitcount $SSH_BFP_MAX_RATE1 -j SSH_LOG_DROP
  $IPTABLES -A SSH_CHK -m recent --name sshchk --update \
    --seconds $SSH_BFP_MAX_TIME2 --hitcount $SSH_BFP_MAX_RATE2 -j SSH_LOG_DROP

  # If no ports were not configured, use default of 22
  if [ -z "$SSH_BFP_PORTS" ]; then
    SSH_BFP_PORTS="22"
  fi

  echo "${INDENT}Protecting TCP port(s): $SSH_BFP_PORTS"

  # Insert rule into the EXTERNAL INPUT chain:
  IFS=' ,'
  for port in $SSH_BFP_PORTS; do
    $IPTABLES -A EXT_INPUT_CHAIN -p tcp --dport $port ${NF_CONNTRACK_STATE:--m state --state} NEW -j SSH_CHK
  done

  return 0
}


# Plugin stop function
plugin_stop()
{
  $IPTABLES -F SSH_CHK
  $IPTABLES -X SSH_CHK 2>/dev/null
  $IPTABLES -F SSH_LOG_DROP
  $IPTABLES -X SSH_LOG_DROP 2>/dev/null

  return 0
}


# Plugin status function
plugin_status()
{
  return 0
}


# Check sanity of eg. environment
plugin_sanity_check()
{
  if [ -z "$SSH_BFP_MAX_RATE1" -o -z "$SSH_BFP_MAX_TIME1" -o -z "$SSH_BFP_MAX_RATE2" -o -z "$SSH_BFP_MAX_TIME2" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The plugin config file is not properly set!\033[0m\n" >&2
    return 1
  fi

  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -f "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    if [ "$SSH_BFP_IPV6_ENABLE" = "0" ]; then
      IPTABLES="ip4tables"
    else
      IPTABLES="iptables"
    fi

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$? ;;
        stop    ) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status  ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
    unset IPTABLES
  fi
fi
